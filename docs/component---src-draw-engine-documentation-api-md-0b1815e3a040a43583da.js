(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{Jmwv:function(t,e,a){"use strict";a.r(e),a.d(e,"_frontmatter",(function(){return i})),a.d(e,"default",(function(){return O}));var b=a("Fcif"),r=a("+I+c"),c=a("/FXl"),n=a("TjRS"),i=(a("aD51"),{});void 0!==i&&i&&i===Object(i)&&Object.isExtensible(i)&&!i.hasOwnProperty("__filemeta")&&Object.defineProperty(i,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/drawEngine/documentation/api.md"}});var l={_frontmatter:i},j=n.a;function O(t){var e=t.components,a=Object(r.a)(t,["components"]);return Object(c.b)(j,Object(b.a)({},l,a,{components:e,mdxType:"MDXLayout"}),Object(c.b)("h1",{id:"drawengine-api-reference"},"drawEngine API Reference"),Object(c.b)("h2",{id:"adddrawentries"},"addDrawEntries"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"adddrawentry"},"addDrawEntry"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"addmatchupendtime"},"addMatchUpEndTime"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"addmatchupofficial"},"addMatchUpOfficial"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"addmatchupresumetime"},"addMatchUpResumeTime"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"addmatchupscheduleddaydate"},"addMatchUpScheduledDayDate"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"addmatchupscheduledtime"},"addMatchUpScheduledTime"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"addmatchupstarttime"},"addMatchUpStartTime"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"addmatchupstoptime"},"addMatchUpStopTime"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"addtimeitem"},"addTimeItem"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"alldrawmatchups"},"allDrawMatchUps"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"allstructurematchups"},"allStructureMatchUps"),Object(c.b)("p",null,"Returns object { matchUps } with array of all matchUps within a structure"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Parameters"),Object(c.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Required"),Object(c.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Type"),Object(c.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"structureId"),Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Required"),Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"string"),Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"id of structure for which matchUps are requeste4d")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"drawDefinition"),Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Optional"),Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"object"),Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"if drawEngine does not already contain drawDefinition")))),Object(c.b)("hr",null),Object(c.b)("h2",{id:"analyzematchup"},"analyzeMatchUp"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"analyzeset"},"analyzeSet"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"assigndrawposition"},"assignDrawPosition"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"assigndrawpositionbye"},"assignDrawPositionBye"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"assignmatchupcourt"},"assignMatchUpCourt"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"assignseed"},"assignSeed"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"attacheventpolicy"},"attachEventPolicy"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"attachpolicy"},"attachPolicy"),Object(c.b)("p",null,"Attaches a policy to a drawDefinition. Policies determine the rules for seeding, avoidance, etc."),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Parameters"),Object(c.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Required"),Object(c.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Type"),Object(c.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"policyDefinition"),Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Required"),Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Object"),Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"A policy definition object (see below)")))),Object(c.b)("p",null,"The structure of an ",Object(c.b)("strong",{parentName:"p"},Object(c.b)("em",{parentName:"strong"},"assignment object"))," is as follows:"),Object(c.b)("pre",null,Object(c.b)("code",Object(b.a)({parentName:"pre"},{className:"language-json"}),"{\n  [policyName]: {      // e.g. 'seeding' or 'avoidance'\n    policyName: 'name'  // for 'seeding' can be the provider of the policy, e.g. 'ITF' or 'USTA'\n    ...attributes       // attributes relevant to the policyName\n  },\n}\n")),Object(c.b)("hr",null),Object(c.b)("h2",{id:"automatedpositioning"},"automatedPositioning"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"builddrawhierarchy"},"buildDrawHierarchy"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"calctiematchupscore"},"calcTieMatchUpScore"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"checkinparticipant"},"checkInParticipant"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"checkoutparticipant"},"checkOutParticipant"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"cleardrawposition"},"clearDrawPosition"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"createqualifyinglink"},"createQualifyingLink"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"devcontext"},"devContext"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"drawmatchups"},"drawMatchUps"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"findmatchup"},"findMatchUp"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"flusherrors"},"flushErrors"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"generatedrawtype"},"generateDrawType"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"generatescorestring"},"generateScoreString"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Parameters"),Object(c.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Required"),Object(c.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Type"),Object(c.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"sets"),Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Required"),Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"object"),Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"An array of TODS sets objects")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"matchUpStatus"),Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Optional"),Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"string"),Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"TODS matchUpStatus ENUM")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"winningSide"),Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Optional"),Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"number"),Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"TODS side indicator: 1 or 2 (can also be string)")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"winnerFirst"),Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Optional"),Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"boolean"),Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Whether or not to display the winning side on the left of each set score")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"autoComplete"),Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Optional"),Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"boolean"),Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Whether or not to convert ",Object(c.b)("strong",{parentName:"td"},"undefined")," to 0")))),Object(c.b)("hr",null),Object(c.b)("h2",{id:"getcheckedinparticipantids"},"getCheckedInParticipantIds"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"getdrawstructures"},"getDrawStructures"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"geterrors"},"getErrors"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"geteventappliedpolicies"},"getEventAppliedPolicies"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"getmatchupcontextids"},"getMatchUpContextIds"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"getmatchupparticipantids"},"getMatchUpParticipantIds"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"getmatchupscheduledetails"},"getMatchUpScheduleDetails"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"getnextseedblock"},"getNextSeedBlock"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"getnextunfilleddrawpositions"},"getNextUnfilledDrawPositions"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"getroundmatchups"},"getRoundMatchUps"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"getstructureseedassignments"},"getStructureSeedAssignments"),Object(c.b)("p",null,"Returns seedAssignments a specific structure based on structureId or structure"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Parameters"),Object(c.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Required"),Object(c.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Type"),Object(c.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"drawDefiniiton"),Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"required"),Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"object"),Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"drawDefinition object")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"structure"),Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Optional"),Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"object"),Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Return seedAssignments for a specific structure")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"structureId"),Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Optional"),Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"string"),Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Return seedAssignments for a specific structure")))),Object(c.b)("p",null,"The result is an array of objects which contain seeding details for all structures within the current draw"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Object Attributes"),Object(c.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Type"),Object(c.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"structureId"),Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"string"),Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"unique identifier for draw structure")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"seedAssignments"),Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"array"),Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"array of assignment objects")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"stage"),Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"string"),Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"draw stage within which structure appears")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"stageSequence"),Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"number"),Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"stageSequence within a draw stage")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"seedLimit"),Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"number"),Object(c.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"either defined structure seedLimit or number of drawPositions")))),Object(c.b)("p",null,"The structure of an ",Object(c.b)("strong",{parentName:"p"},Object(c.b)("em",{parentName:"strong"},"assignment object"))," is as follows:"),Object(c.b)("pre",null,Object(c.b)("code",Object(b.a)({parentName:"pre"},{className:"language-json"}),'{\n  "seedNumber": 1,\n  "seedValue": 1,\n  "participantId": "uuid-of-participant"\n}\n')),Object(c.b)("p",null,"The most basic usage is to retrieve seed assignments for a draw which has a single main stage structure"),Object(c.b)("pre",null,Object(c.b)("code",Object(b.a)({parentName:"pre"},{className:"language-js"}),"drawEngine.setState(drawDefinition);\nconst structureId = drawDefinition.structures[0].structureId;\nconst structureSeedingDetails = drawEngine.getStructureSeedAssignments({\n  structureId,\n});\nconst firstStructureDetails = structureSeedingDetails[0];\nconst { seedAssignments } = firstStructureDetails;\n")),Object(c.b)("hr",null),Object(c.b)("h2",{id:"getsetcomplement"},"getSetComplement"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"getstate"},"getState"),Object(c.b)("p",null,"No parameters."),Object(c.b)("p",null,"Returns a deep copy of the current drawEngine state."),Object(c.b)("pre",null,Object(c.b)("code",Object(b.a)({parentName:"pre"},{className:"language-js"}),"const { drawDefinition } = drawEngine.getState();\n")),Object(c.b)("hr",null),Object(c.b)("h2",{id:"getstructurequalifierscount"},"getStructureQualifiersCount"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"gettiebreakcomplement"},"getTiebreakComplement"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"initializestructureseedassignments"},"initializeStructureSeedAssignments"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"load"},"load"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"matchupactions"},"matchUpActions"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"matchupduration"},"matchUpDuration"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"newdrawdefinition"},"newDrawDefinition"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"positionactions"},"positionActions"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"removeentry"},"removeEntry"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"reset"},"reset"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"resettimeitems"},"resetTimeItems"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"setdrawdescription"},"setDrawDescription"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"setdrawid"},"setDrawId"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"setmatchupformat"},"setMatchUpFormat"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"setmatchupstatus"},"setMatchUpStatus"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"setparticipants"},"setParticipants"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"setstagealternates"},"setStageAlternates"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"setstagedrawsize"},"setStageDrawSize"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"setstagequalifierscount"},"setStageQualifiersCount"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"setstagewildcardscount"},"setStageWildcardsCount"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"setstate"},"setState"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"getstructurematchups"},"getStructureMatchUps"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"tallyparticipantresults"},"tallyParticipantResults"),Object(c.b)("hr",null),Object(c.b)("h2",{id:"version"},"version"),Object(c.b)("p",null,"Returns NPM package version"),Object(c.b)("hr",null))}void 0!==O&&O&&O===Object(O)&&Object.isExtensible(O)&&!O.hasOwnProperty("__filemeta")&&Object.defineProperty(O,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/drawEngine/documentation/api.md"}}),O.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-draw-engine-documentation-api-md-0b1815e3a040a43583da.js.map