{"version":3,"sources":["webpack:///../src/utilities/documentation/utilities.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"4OAMaA,G,UAAe,S,0NAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,aADR,aAGA,iBAAQ,CACN,GAAM,gBADR,gBAGA,uBAAK,gCAAMC,WAAW,OAAU,CAC5B,UAAa,gBADZ,gDAIL,iEAAgD,sBAAQA,WAAW,KAAnB,qBAAhD,OAA6G,sBAAQA,WAAW,KAAnB,QAA7G,2DACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,wEAIL,gCACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,uCAIL,0QACA,sBACE,kBAAIA,WAAW,MAAf,6DACA,kBAAIA,WAAW,MAAf,oF,wNAMNJ,EAAWK,gBAAiB","file":"component---src-utilities-documentation-utilities-md-c17d5bd910aa8ff4a52a.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/charlesallen/Development/CourtHive/tods-competition-factory/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"utilities\"\n    }}>{`Utilities`}</h1>\n    <h2 {...{\n      \"id\": \"makedeepcopy\"\n    }}>{`makeDeepCopy`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`makeDeepCopy(element, convertExtensions);\n`}</code></pre>\n    <p>{`Makes a deep copy of a JSON object. When `}<strong parentName=\"p\">{`convertExtensions`}</strong>{` is `}<strong parentName=\"p\">{`true`}</strong>{` then TODS extensions objects are converted as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`element.extensions: [ { name: 'extensionName', value: { a: 1 } }]\n`}</code></pre>\n    <p>{`becomes`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`element._extensionName: { a: 1 }\n`}</code></pre>\n    <p>{`This is useful for inContext representations of elements such as participants where \"accessor strings\" can be used to directly access values rather than searching through arrays of extensions; a good example of this is in Avoidance Policies.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`@param {object} element - any JSON object to be converted`}</li>\n      <li parentName=\"ul\">{`@param {boolean} convertExtensions - whether or not to convert extensions`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}