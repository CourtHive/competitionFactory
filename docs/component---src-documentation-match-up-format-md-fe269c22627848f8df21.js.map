{"version":3,"sources":["webpack:///../src/documentation/matchUpFormat.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"2OAMaA,G,UAAe,S,oNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,mBADR,mBAGA,mCAAkB,sBAAQC,WAAW,KAAnB,kBAAlB,uBAA4F,sBAAQA,WAAW,KAAnB,cAA5F,wBAAmK,sBAAQA,WAAW,KAAnB,aAAnK,sBAAuO,sBAAQA,WAAW,KAAnB,aAAvO,0CAA+T,sBAAQA,WAAW,KAAnB,kBAA/T,gFAAkc,sBAAQA,WAAW,KAAnB,aAAlc,iMACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,qEAIL,qFAAoE,sBAAQA,WAAW,KAAnB,iBAApE,gBAAsI,sBAAQA,WAAW,KAAnB,WAAtI,YAA8L,sBAAQA,WAAW,KAAnB,oBAA9L,8EAAiU,sBAAQA,WAAW,KAAnB,iBAAjU,mDAAsa,sBAAQA,WAAW,KAAnB,iBAAta,wEACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,kGAOL,mCAAkB,sBAAQA,WAAW,KAAnB,iBAAlB,mBACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,kQAUL,4BAAW,sBAAQA,WAAW,KAAnB,iBAAX,UAAuE,sBAAQA,WAAW,KAAnB,WAAvE,uCACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,sGASL,iBAAQ,CACN,GAAM,qBADR,qBAGA,mCAAkB,6BAAGA,WAAW,KAAQ,CACpC,KAAQ,0DADM,cAAlB,QAEgC,6BAAGA,WAAW,KAAQ,CAClD,KAAQ,2DADoB,eAFhC,sJ,kNASJJ,EAAWK,gBAAiB","file":"component---src-documentation-match-up-format-md-fe269c22627848f8df21.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/charlesallen/Development/CourtHive/tods-competition-factory/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"matchup-formats\"\n    }}>{`MatchUp Formats`}</h1>\n    <p>{`In TODS, a `}<strong parentName=\"p\">{`drawDefinition`}</strong>{` is a collection of `}<strong parentName=\"p\">{`structures`}</strong>{`. For example a MAIN `}<strong parentName=\"p\">{`structure`}</strong>{` and a CONSOLATION `}<strong parentName=\"p\">{`structure`}</strong>{` are considered to be part of the same `}<strong parentName=\"p\">{`drawDefinition`}</strong>{` because they have a logical relationship whereby participants move from one `}<strong parentName=\"p\">{`structure`}</strong>{` to another. USTA's TDM, its predecessor TMS, and CourtHive TMX Classic do not represent the relationship between structures as hierarchical, whereas in TODS there is a nesting of elements:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{` tournament.events[].drawDefinitions[].structures[].matchUps[]\n`}</code></pre>\n    <p>{`An application using the Competition Factory can request the `}<strong parentName=\"p\">{`matchUpFormat`}</strong>{` for a given `}<strong parentName=\"p\">{`matchUp`}</strong>{` and the `}<strong parentName=\"p\">{`tournamentEngine`}</strong>{` will traverse the hierarchy from bottom up looking to see at what level a `}<strong parentName=\"p\">{`matchUpFormat`}</strong>{` has been set. This method will also return any `}<strong parentName=\"p\">{`matchUpFormat`}</strong>{` codes encountered in the hierarchy within which a matchUp is found:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { matchUpFormat } = tournamentEngine.getMatchUpFormat({\n  drawId,\n  matchUpId,\n});\n`}</code></pre>\n    <p>{`To set the `}<strong parentName=\"p\">{`matchUpFormat`}</strong>{` at each level:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.setEventDefaultMatchUpFormat({ eventId, matchUpFormat });\ntournamentEngine.setDrawDefaultMatchUpFormat({ drawId, matchUpFormat });\ntournamentEngine.setStructureDefaultMatchUpFormat({\n  drawId,\n  structureId,\n  matchUpFormat,\n});\n`}</code></pre>\n    <p>{`The `}<strong parentName=\"p\">{`matchUpFormat`}</strong>{` for a `}<strong parentName=\"p\">{`matchUp`}</strong>{` is set at the time of score entry:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`tournamentEngine.setMatchUpStatus({\n  drawId,\n  matchUpId,\n  matchUpFormat,\n  outcome,\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"github-repository\"\n    }}>{`GitHub repository`}</h2>\n    <p>{`There is a `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/CourtHive/tods-matchup-format-code\"\n      }}>{`Repository`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.npmjs.com/package/tods-matchup-format-code\"\n      }}>{`NPM Package`}</a>{` specifically for generating and parsing ITF TODS MatchUp Format Codes. The documentation includes examples with an interactive application.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}