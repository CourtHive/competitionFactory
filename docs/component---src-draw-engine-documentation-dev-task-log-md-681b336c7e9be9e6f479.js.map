{"version":3,"sources":["webpack:///../src/drawEngine/documentation/devTaskLog.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"uPAMaA,G,UAAe,S,4NAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,wBADR,wBAGA,sBACE,kBAAIC,WAAW,MACb,iBAAGA,WAAW,MAAd,wHAEF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,wGAEF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,sIAEF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,wBAA4C,sBAAQA,WAAW,KAAnB,yBAE9C,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,uDAA2E,kBAAIA,WAAW,KAAf,wBAE7E,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,uBAA2C,sBAAQA,WAAW,KAAnB,qBAA3C,0CAA2I,kBAAIA,WAAW,KAAf,sBAA3I,2CAAqO,kBAAIA,WAAW,KAAf,wBAEvO,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,aAAiC,kBAAIA,WAAW,KAAf,UAAjC,oCAAwG,sBAAQA,WAAW,KAAnB,yBAE1G,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,sHAGJ,iBAAQ,CACN,GAAM,WADR,WAGA,sBACE,kBAAIA,WAAW,MAAf,OAA4B,sBAAQA,WAAW,MAAnB,cAA5B,mLACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,QAApB,mDAAiH,sBAAQA,WAAW,MAAnB,QAAjH,gJACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,QAApB,UAAwE,kBAAIA,WAAW,MAAf,WAAxE,mBAAgI,sBAAQA,WAAW,MAAnB,eAAhI,6HAA8S,sBAAQA,WAAW,MAAnB,QAA9S,+CAAuY,kBAAIA,WAAW,MAAf,WAAvY,+KAEF,iLACA,kMAAiL,sBAAQA,WAAW,KAAnB,iBAAjL,OAA0O,sBAAQA,WAAW,KAAnB,cAA1O,mBAA4S,sBAAQA,WAAW,KAAnB,mBAA5S,gDAAgZ,sBAAQA,WAAW,KAAnB,kBAAhZ,yCAA4e,sBAAQA,WAAW,KAAnB,kBAA5e,OAAsiB,sBAAQA,WAAW,KAAnB,cAAtiB,gPAAq0B,sBAAQA,WAAW,KAAnB,cAAr0B,KACA,iKAAgJ,kBAAIA,WAAW,KAAf,sBAAhJ,iDAAgP,sBAAQA,WAAW,KAAnB,sBAAhP,gBAAuT,sBAAQA,WAAW,KAAnB,cAAvT,gBAAsX,sBAAQA,WAAW,KAAnB,aAAtX,6BAAic,sBAAQA,WAAW,KAAnB,cAAjc,wCAAwhB,sBAAQA,WAAW,KAAnB,cAAxhB,OAA8kB,sBAAQA,WAAW,KAAnB,aAA9kB,6BAAypB,sBAAQA,WAAW,KAAnB,eAAzpB,4BAAquB,sBAAQA,WAAW,KAAnB,UAAruB,yKAAy7B,sBAAQA,WAAW,KAAnB,sBAAz7B,gEAAgjC,sBAAQA,WAAW,KAAnB,cAAhjC,QAAumC,sBAAQA,WAAW,KAAnB,aAAvmC,KACA,iBAAQ,CACN,GAAM,cADR,cAGA,sBACE,kBAAIA,WAAW,MAAf,2K,0NAMNJ,EAAWK,gBAAiB","file":"component---src-draw-engine-documentation-dev-task-log-md-681b336c7e9be9e6f479.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/posiwid/Explorations/node/CourtHive/devel/competitionFactory/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"drawengine-dev-tasks\"\n    }}>{`drawEngine dev tasks`}</h1>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`assignment of non-BYE drawPositions should check whether paired position is BYE and if so, drawPosition be advanced`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`assignment of BYE should check whether paired position is filled and if so, advance paired position`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`removal of BYE should check whether paired position is filled and if so, paired position should be removed from target directions`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`write unit tests for `}<strong parentName=\"p\">{`activeDrawPositions`}</strong></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`a drawPosition advanced by BYE does not count as an `}<em parentName=\"p\">{`activeDrawPosition`}</em></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`write unit test for `}<strong parentName=\"p\">{`clearDrawPosition`}</strong>{` which includes attempting to clear an `}<em parentName=\"p\">{`activeDrawPosition`}</em>{` and a position which is paired with an `}<em parentName=\"p\">{`activeDrawPosition`}</em></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`directing `}<em parentName=\"p\">{`losers`}</em>{` across links should add them to `}<strong parentName=\"p\">{`positionAssignments`}</strong></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`how to determine that a matchUp is a FEED_IN?  one assigned drawPosition is not found in RoundNumber: 1 matchUps`}</p>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"seeding\"\n    }}>{`Seeding`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`all `}<strong parentName=\"li\">{`qualifying`}</strong>{` stage structures may be seeded; progressive draws consist of sequences of qualifying structures which feed into each other, and each stageSequence may be seeded independently`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`main`}</strong>{` stageSequence: 1 structures may be seeded, but `}<strong parentName=\"li\">{`main`}</strong>{` stageSequence 1+n are not seeded as long as participant draw positions are continuous, e.g. fed TOP DOWN or BOTTOM UP with a fixed pattern.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`main`}</strong>{` stage `}<em parentName=\"li\">{`playoff`}</em>{` structures and `}<strong parentName=\"li\">{`consolation`}</strong>{` stage structures may be seeded if participant positions are NOT continuous with the structures which are their source.  (`}<strong parentName=\"li\">{`main`}</strong>{` stage stageSequence: 1 is referred to as a `}<em parentName=\"li\">{`playoff`}</em>{` after a round robin qualifying stage).  If drawPositions for 5-8 playoffs are NOT continuous with the stageSequence which produced the participants, seeding is possible.`}</li>\n    </ul>\n    <p>{`Considering the above, structures in general must be able to independently specify both the number of seeds and the participants nominated to be seeded.`}</p>\n    <p>{`A structure definition needs to know the number of participants who will be seeded before there are any entries, which is an argument for an attribute along the lines of `}<strong parentName=\"p\">{`numberOfSeeds`}</strong>{` or `}<strong parentName=\"p\">{`seedsCount`}</strong>{`, or at least a `}<strong parentName=\"p\">{`seedAssignments`}</strong>{` array which contains objects defining which `}<strong parentName=\"p\">{`participantIds`}</strong>{` are nominated as seeds -- which maps `}<strong parentName=\"p\">{`pariticipantId`}</strong>{` to `}<strong parentName=\"p\">{`seedNumber`}</strong>{`. There are policies which define where seeds may be placed within structures, but the fact that a position may contain a seed doesn’t imply that it does contain a seed, because seeds may be replaced by alternates who do not inherit the `}<strong parentName=\"p\">{`seedNumber`}</strong>{`.`}</p>\n    <p>{`For display purposes it is important to know whether to represent a participant’s seeding as seedNumber or seedBlock .  Somewhere in the `}<em parentName=\"p\">{`construction phase`}</em>{` definition we need to have what amounts to a `}<strong parentName=\"p\">{`seedBlockThreshold`}</strong>{`, which is a `}<strong parentName=\"p\">{`seedNumber`}</strong>{` after which `}<strong parentName=\"p\">{`seedBlock`}</strong>{` is displayed rather than `}<strong parentName=\"p\">{`seedNumber`}</strong>{`.  Within a Match we can have either `}<strong parentName=\"p\">{`seedNumber`}</strong>{` or `}<strong parentName=\"p\">{`seedBlock`}</strong>{` as an attribute within a `}<strong parentName=\"p\">{`participant`}</strong>{` object… or an attribute `}<strong parentName=\"p\">{`seeded`}</strong>{` which can be a String representation of how the participant was seeded…  at this point I’m inclined to not introduce yet another permutation of seeded state.  Since `}<strong parentName=\"p\">{`seedBlockThreshold`}</strong>{` is required, it seems to make more sense to just stick with `}<strong parentName=\"p\">{`seedNumber`}</strong>{` and `}<strong parentName=\"p\">{`seedBlock`}</strong>{`.`}</p>\n    <h2 {...{\n      \"id\": \"scheduling\"\n    }}>{`Scheduling`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`If a draw is re-generated but retains the same \"dimensions\" (drawSize), the schedule can be preserved by pinning scheudling objects to RoundNumber/RoundPosition`}</li>\n    </ol>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}